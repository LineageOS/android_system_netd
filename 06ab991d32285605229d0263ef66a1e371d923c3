{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ea9c964d_fda4c866",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 11883
      },
      "writtenOn": "2022-02-01T12:25:07Z",
      "side": 1,
      "message": "Some rationale on the change, will go in a commit msg\n\nIdeally we should be using the uid map to store which interfaces are denied but this poses more than a few issues:\nWe can\u0027t know at compile-time ( required for BPF ) the number of interfaces that will be used on device\nPicking a \"good enough\" value isn\u0027t sane ( pick 50 ifaces ), we\u0027d be polluting the BPF stack ( or whatever the kernel uses ) with 50 * 4 bytes of data for each UID ( that is to say, not a small number ), while the total amount is ok-ish memory wise, it would be a waste because 99% of the time we\u0027ll see 50 zeros.\n\nI ended up creating a whole new map that uses both the uid and interface index as key and a simple 1 byte struct ( currently used as a boolean ) to store the corresponding data\nWith this implementation we waste space storing the key, but it would be 8 bytes for every actual \"stored\" value ( aka toggle in setting )\nWe can\u0027t do much about it, as both uid and index are 32 bits integers, even though I doubt we\u0027ll ever see \"big\" numbers in them, but to be safe I simply mapped the key as \"uid|index\", this will cover everything we\u0027ll ever need.",
      "revId": "06ab991d32285605229d0263ef66a1e371d923c3",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "265f45a9_b62e6d07",
        "filename": "bpf_progs/netd.c",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 15060
      },
      "writtenOn": "2022-02-01T12:21:01Z",
      "side": 1,
      "message": "How do we remove values for removed interfaces?",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 69,
        "endChar": 55
      },
      "revId": "06ab991d32285605229d0263ef66a1e371d923c3",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1fa36f7_b9e4f392",
        "filename": "bpf_progs/netd.c",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 11883
      },
      "writtenOn": "2022-02-01T12:28:42Z",
      "side": 1,
      "message": "See comment in TrafficController.cpp, we\u0027ll have to rewrite the function",
      "parentUuid": "265f45a9_b62e6d07",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 69,
        "endChar": 55
      },
      "revId": "06ab991d32285605229d0263ef66a1e371d923c3",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d2eafef_179d6b33",
        "filename": "libnetdbpf/include/netdbpf/bpf_shared.h",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 11883
      },
      "writtenOn": "2022-02-01T12:05:08Z",
      "side": 1,
      "message": "NOTE: the struct used in BPF is currently a single byte, we could\u0027ve used uint8_t directly while defining the map, but I kept the struct implementation in case we\u0027ll ever need more information based on uid|iface mapping\n\nOr instead of restricted ( mask maybe? ) we could use a simple bitmask to store up to 8 booleans!",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 63,
        "endChar": 0
      },
      "revId": "06ab991d32285605229d0263ef66a1e371d923c3",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57e79215_c4949403",
        "filename": "libnetdbpf/include/netdbpf/bpf_shared.h",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 11883
      },
      "writtenOn": "2022-02-01T12:05:08Z",
      "side": 1,
      "message": "I made this value arbitrary, need to check if it makes sense",
      "range": {
        "startLine": 105,
        "startChar": 48,
        "endLine": 105,
        "endChar": 52
      },
      "revId": "06ab991d32285605229d0263ef66a1e371d923c3",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae397493_15e5414f",
        "filename": "server/OemNetdListener.cpp",
        "patchSetId": 1
      },
      "lineNbr": 155,
      "author": {
        "id": 15060
      },
      "writtenOn": "2022-02-01T12:21:01Z",
      "side": 1,
      "message": "How should we handle the case where the interface index is not found?",
      "range": {
        "startLine": 155,
        "startChar": 19,
        "endLine": 155,
        "endChar": 79
      },
      "revId": "06ab991d32285605229d0263ef66a1e371d923c3",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7c0d62c_0d3630a9",
        "filename": "server/TrafficController.cpp",
        "patchSetId": 1
      },
      "lineNbr": 572,
      "author": {
        "id": 11883
      },
      "writtenOn": "2022-02-01T12:05:08Z",
      "side": 1,
      "message": "Not sure if it\u0027s worth the trouble, but it would be cool using Status and netdutils::status return codes",
      "range": {
        "startLine": 572,
        "startChar": 0,
        "endLine": 572,
        "endChar": 3
      },
      "revId": "06ab991d32285605229d0263ef66a1e371d923c3",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a29c6e22_ef735124",
        "filename": "server/TrafficController.cpp",
        "patchSetId": 1
      },
      "lineNbr": 572,
      "author": {
        "id": 15060
      },
      "writtenOn": "2022-02-01T12:28:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c7c0d62c_0d3630a9",
      "range": {
        "startLine": 572,
        "startChar": 0,
        "endLine": 572,
        "endChar": 3
      },
      "revId": "06ab991d32285605229d0263ef66a1e371d923c3",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84a79721_b5d7463c",
        "filename": "server/TrafficController.cpp",
        "patchSetId": 1
      },
      "lineNbr": 582,
      "author": {
        "id": 11883
      },
      "writtenOn": "2022-02-01T12:28:42Z",
      "side": 1,
      "message": "uint64_t key \u003d static_cast\u003cuint64_t\u003e(uid) \u003c\u003c 32 | ifaceIndex;\nStatus res;\nif (!restricted)\n   res \u003d mUidIfaceIndexRestrictedMap.deleteValue(key);\nelse\n   uidIfaceRestrictedValue.restricted \u003d 1;\n   res \u003d mUidIfaceIndexRestrictedMap.writeValue(key, uidIfaceRestrictedValue, BPF_ANY);",
      "range": {
        "startLine": 580,
        "startChar": 0,
        "endLine": 582,
        "endChar": 95
      },
      "revId": "06ab991d32285605229d0263ef66a1e371d923c3",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8819e9bd_2a797ceb",
        "filename": "server/TrafficController.h",
        "patchSetId": 1
      },
      "lineNbr": 193,
      "author": {
        "id": 11883
      },
      "writtenOn": "2022-02-01T12:05:08Z",
      "side": 1,
      "message": "might want a comment\n\n/*\n * mUidIfaceIndexRestrictedMap: Store per uid|iface restricted network bit\n */",
      "range": {
        "startLine": 193,
        "startChar": 46,
        "endLine": 193,
        "endChar": 73
      },
      "revId": "06ab991d32285605229d0263ef66a1e371d923c3",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3a787178_087f45ae",
        "filename": "server/TrafficController.h",
        "patchSetId": 1
      },
      "lineNbr": 193,
      "author": {
        "id": 15060
      },
      "writtenOn": "2022-02-01T12:28:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8819e9bd_2a797ceb",
      "range": {
        "startLine": 193,
        "startChar": 46,
        "endLine": 193,
        "endChar": 73
      },
      "revId": "06ab991d32285605229d0263ef66a1e371d923c3",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71"
    }
  ]
}